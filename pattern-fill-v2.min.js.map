{"version":3,"file":"pattern-fill-v2.min.js","sources":["pattern-fill-v2.js"],"names":["Highcharts","idCounter","wrap","each","HighchartsPatterns","SVGRenderer","prototype","addPattern","id","options","pattern","this","createElement","attr","patternUnits","width","height","add","defs","element","path","d","stroke","stroke-width","strokeWidth","fill","color","image","w","h","VMLElement","VMLRenderer","patterns","Element","proceed","prop","elem","substring","length","renderer","markup","getElementsByTagName","removeChild","prepVML","console","log","appendChild","document","parentNode","nodeType","outerHTML","call","Chart","apply","chart","colors","addPredefinedPatterns","undefined","getOptions","i"],"mappings":"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","sourcesContent":["/**\n * Highcharts pattern fill plugin\n *\n * Author:         Torstein Honsi\n *                 Stephane Vanraes\n * Last revision:  2015-05-04\n * License:        MIT License\n *\n * Remark:         The latest version is not compatible with earlier versions.\n *\n * Usage:          Add a 'defs' object to the options\n *                 Create a 'patterns' array under 'defs'\n *                 Each item in this array represents a pattern\n *                 To use a pattern, set the color to `url(#id-of-pattern)'\n *                 @example\n *                 series: [ {\n *                   type: 'column',\n *                   data: [1, 2, 3],\n *                   color: 'url(#highcharts-default-pattern-9)'\n *                 }]\n *\n * Options for the patterns:\n * - id:           The id for the pattern, defaults to highcharts-pattern-# with # an increasing number for each pattern without id\n * - width:        The width of the pattern, defaults to 10\n * - height:       The height of the pattern, defaults to 10\n * - path:         In SVG, the path for the pattern\n *                 (Note: this can be a string with only a path, or an object with d, stroke, strokewidth, ...)\n * - image:        An image source for the pattern\n * - color:        A color to be used instead of a path\n *\n * Notes:          VML does not support the path setting\n *                 If all other fills fail (no path, image or color) the pattern will return #A0A0A0 as a color\n *                 Several patterns have been predefined, called highcharts-default-pattern-# (numbered 0-9)\n *\n */\n\n/*global Highcharts */\n(function(Highcharts) {\n\n    'use strict';\n\n    var idCounter = 0,\n        wrap = Highcharts.wrap,\n        each = Highcharts.each;\n\n    var HighchartsPatterns = [\n        'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11',\n        'M 0 10 L 10 0 M -1 1 L 1 -1 M 9 11 L 11 9',\n        'M 3 0 L 3 10 M 8 0 L 8 10',\n        'M 0 3 L 10 3 M 0 8 L 10 8',\n        'M 0 3 L 5 3 L 5 0 M 5 10 L 5 7 L 10 7',\n        'M 3 3 L 8 3 L 8 8 L 3 8 Z',\n        'M 5 5 m -4 0 a 4 4 0 1 1 8 0 a 4 4 0 1 1 -8 0',\n        'M 10 3 L 5 3 L 5 0 M 5 10 L 5 7 L 0 7',\n        'M 2 5 L 5 2 L 8 5 L 5 8 Z',\n        'M 0 0 L 5 10 L 10 0'\n    ];\n\n    //// SVG RENDERER\n    Highcharts.SVGRenderer.prototype.addPattern = function(id, options) {\n        var id = id || ('highcharts-pattern-' + idCounter++),\n            pattern = this.createElement('pattern').attr({\n                id: id,\n                patternUnits: 'userSpaceOnUse',\n                width: options.width || 10,\n                height: options.height || 10\n            }).add(this.defs);\n\n        // get id\n        pattern.id = pattern.element.id;\n\n        if (options.path) {\n            var path = options.path;\n            this.createElement('path').attr({\n                'd': path.d || path,\n                'stroke': path.stroke || '#343434',\n                'stroke-width': path.strokeWidth || 2,\n                'fill': path.fill || 'transparent'\n            }).add(pattern);\n            pattern.color = options.color;\n        } else if (options.image) {\n            this.image(options.image, 0, 0, options.width, options.height).add(pattern);\n        } else if (options.color) {\n            var w = options.width || 10,\n                h = options.height || 10;\n\n            this.createElement('path').attr({\n                'd': 'M 0 0 L 0 ' + h + ' L ' + w + ' ' + h + ' L ' + w + ' 0 Z',\n                'fill': options.color,\n                'stroke-width': 0\n            }).add(pattern);\n        }\n        return pattern;\n    };\n\n    if (Highcharts.VMLElement) {\n\n        Highcharts.VMLRenderer.prototype.addPattern = function(id, options) {\n            var patterns = this.patterns || {};\n\n            id = id || ('highcharts-pattern-' + idCounter++);\n            patterns[id] = options;\n            this.patterns = patterns;\n        };\n\n        Highcharts.wrap(Highcharts.VMLRenderer.prototype.Element.prototype, 'fillSetter', function(proceed, color, prop, elem) {\n            if (typeof color === 'string' && color.substring(0, 5) === 'url(#') {\n                var id = color.substring(5, color.length - 1),\n                    pattern = this.renderer.patterns[id],\n                    markup;\n\n                if (pattern.image) {\n                    // Remove Previous fills                    \n                    if (elem.getElementsByTagName('fill').length) {\n                        elem.removeChild(elem.getElementsByTagName('fill')[0]);\n                    }\n\n                    markup = this.renderer.prepVML(['<', prop, ' type=\"tile\" src=\"', pattern.image, '\" />']);\n                    console.log(markup);\n                    elem.appendChild(document.createElement(markup));\n\n                    // Work around display bug on updating attached nodes\n                    if (elem.parentNode.nodeType === 1) {\n                        elem.outerHTML = elem.outerHTML;\n                    }\n\n                } else if (pattern.color) {\n                    proceed.call(this, pattern.color, prop, elem);\n                } else {\n                    proceed.call(this, '#A0A0A0', prop, elem);\n                }\n            } else {\n                proceed.call(this, color, prop, elem);\n            }\n        });\n    }\n\n    //// ADD PATTERNS TO THE DEFS\n    Highcharts.wrap(Highcharts.Chart.prototype, 'getContainer', function(proceed) {\n        proceed.apply(this);\n\n        var chart = this,\n            renderer = chart.renderer,\n            options = chart.options,\n            colors = options.colors,\n            patterns = options.defs && options.defs.patterns;\n\n        addPredefinedPatterns(renderer);\n\n        if (patterns) {\n            each(patterns, function(pattern) {\n                renderer.addPattern((pattern.id || undefined), {\n                    path: pattern.path,\n                    image: pattern.image,\n                    color: pattern.color,\n                    width: pattern.width,\n                    height: pattern.height\n                });\n            });\n        }\n\n    });\n\n    // PREDEFINED PATTERNS\n    function addPredefinedPatterns(renderer) {\n        var colors = Highcharts.getOptions().colors;\n\n        each(HighchartsPatterns, function(pattern, i) {\n            renderer.addPattern('highcharts-default-pattern-' + i, {\n                path: pattern,\n                color: colors[i]\n            });\n        });\n    }\n\n})(Highcharts);\n"]}